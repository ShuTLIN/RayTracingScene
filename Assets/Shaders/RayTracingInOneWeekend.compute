
// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#define MAX_RAY_RECURSIVE_DEPTH 8
#define AA_SAMPLES				8

#include "Types.cginc"
#include "Utility.cginc"
#include "Ray.cginc"
#include "Material.cginc"
#include "Sphere.cginc"
#include "Triangle.cginc"
#include "aabbIntersection.cginc"
#include "SimpleAS.cginc"
#include "Camera.cginc"

StructuredBuffer<TriangleData> FaceAttrib;
StructuredBuffer<AABB> objAABB;
StructuredBuffer<SphereData> SimpleAccelerationStructureData;


RWTexture2D<float4> Result;
Texture2D<float4> _SkyboxTexture;
Texture2D<float4> _ProceduralTexture;
SamplerState sampler_SkyboxTexture;
SamplerState sampler_ProceduralTexture;

//Vector4(m_RTSize.x, m_RTSize.y, UnityEngine.Mathf.Sin(Time.time * 10.0f), m_NumSpheres)
float4 TargetSize;
float  TriangleNum;

float3 Ray_Color(Ray r, SimpleAccelerationStructure sas,SimpleAccelerationTriangle sat, float2 uv)
{
	//initialize
	Sphere Sph;
	HitRecord Rec = _HitRecord();
	Ray R = r;
	float3 Factor = float3(1, 1, 1);
	Ray Scattered = _Ray(float3(0, 0, 0), float3(0, 0, 0));
	float3 Attenuation = float3(0, 0, 0);

	float hitSphereTime=0.0;
	float3 procedural_texture=float3(1.0,1.0,1.0);

	//遞迴深度=MAX_RAY_RECURSIVE_DEPTH
	for (int i = 0; i < MAX_RAY_RECURSIVE_DEPTH; i++)
	{

		
		if (SimpleAccelerationStructure_Hit(sas, R, MINT, INFINITY, Rec))
		{
			float Offset = ((float)i) / (float)(MAX_RAY_RECURSIVE_DEPTH * 2);

			if (Material_Scatter(Rec.Material, R, Rec, Attenuation, Scattered, float3(uv, Offset)))
			{
				R = Scattered;
				Factor *= Attenuation;

				float3 UnitDir = normalize(R.Dir);
				// 2D mapping 
				float theta = acos(UnitDir.y) / -PI;
				float phi = atan2(UnitDir.x, -UnitDir.z) / -PI * 0.5f;
				procedural_texture = _ProceduralTexture.SampleLevel(sampler_ProceduralTexture,float2(phi,theta),0).xyz;
				
			}
			else
			{
				return float3(0, 0, 0);
			}
		}
		

		if( isHitAABB(objAABB,R) > 0.0){
		
		
			if(SimpleAccelerationTriangle_Hit(sat, R, MINT, INFINITY, Rec)){
					//return float3(0, 1, 0);
					float Offset = ((float)i) / (float)(MAX_RAY_RECURSIVE_DEPTH * 2);
					if (Material_Scatter(Rec.Material, R, Rec, Attenuation, Scattered, float3(uv, Offset)))
					{
						R = Scattered;
						Factor *= Attenuation;
					}
					else
					{
						return float3(0, 0, 0);
					}
			}
			else
			{
				float3 UnitDir = normalize(R.Dir);
			
				//hdr 2D mapping 
				float theta = acos(UnitDir.y) / -PI;
				float phi = atan2(UnitDir.x, -UnitDir.z) / -PI * 0.5f;
				float3 env_color = _SkyboxTexture.SampleLevel(sampler_SkyboxTexture,float2(phi,theta),0).xyz * Factor;
				return env_color*procedural_texture;
			}	
			

		}
		else
		{
			float3 UnitDir = normalize(R.Dir);
			//float t = 0.5 * (UnitDir.y + 1.0f);
			//return lerp(BKG_COLOR0, BKG_COLOR1, t) * Factor;
			
			//hdr 2D mapping 
			float theta = acos(UnitDir.y) / -PI;
			float phi = atan2(UnitDir.x, -UnitDir.z) / -PI * 0.5f;
			float3 env_color = _SkyboxTexture.SampleLevel(sampler_SkyboxTexture,float2(phi,theta),0).xyz * Factor;
			//return _ProceduralTexture.SampleLevel(sampler_ProceduralTexture,float2(phi,theta),0).xyz*procedural_texture;
			return env_color*procedural_texture;
			//return env_color;
			
			//Spherical Mapping
			//float u = UnitDir.x / (2*sqrt(pow(UnitDir.x,2.0) + pow(UnitDir.y,2.0) + pow(UnitDir.z+1,2.0))) + 0.5;
			//float v = UnitDir.y / (2*sqrt(pow(UnitDir.x, 2.0) + pow(UnitDir.y, 2.0) + pow(UnitDir.z + 1, 2.0))) + 0.5;
			//float3 env_color = _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(u, v), 0).xyz * Factor;
			//return env_color;
		}
	}

	//if bound over MAX_RAY_RECURSIVE_DEPTH and not hit skybox then return black (ambient occlusion)
	return float3(0, 0, 0);
}


[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	//-1~+1
	float2 ViewportSize = float2(2.0, 2.0);
	float FocalLength = 1.0f;

	float3 Origin = float3(0, 0, 0);
	float3 Horizontal = float3(ViewportSize.x, 0, 0);
	float3 Vertical = float3(0, ViewportSize.y, 0);
	float3 LowerLeftCorner = Origin - (Horizontal / 2.0) - (Vertical / 2.0) - float3(0, 0, FocalLength);
	
	SimpleAccelerationStructure SAS = _SimpleAccelerationStructure(int(TargetSize.w), SimpleAccelerationStructureData);
	SimpleAccelerationTriangle SAT = _SimpleAccelerationTriangle(int(TriangleNum),FaceAttrib);

	float3 LookFrom = float3(13, 2, 3);
	float3 LookAt = float3(0, 0, 0);
	float3 VUp = float3(0, 1, 0);
	float Dist2Focus = 10.0;
	float Aperture = 0.2;

	//_Camera(float3 look_from, float3 look_at, float3 vup, float vfov, float aspect_ratio, float aperture, float focus_dist)
	Camera Cam = _Camera(LookFrom, LookAt, VUp, 25, TargetSize.x / TargetSize.y, Aperture, Dist2Focus);

	float3 Color = float3(0, 0, 0);

	for (int s = 0; s < AA_SAMPLES; s++)
	{
		float2 Seed = float2(id.xy) / TargetSize.xy;
		float Offset = float(s) / float(AA_SAMPLES);

		float2 Jitter = float2(Random(Seed), Random(Seed + Offset));
		float2 UV = (float2(id.xy) + Jitter) / TargetSize.xy;

		Ray R = Camera_GetRay(Cam, UV);
		Color += Ray_Color(R, SAS,SAT, UV);
	}
	Color /= float(AA_SAMPLES);
	Color = clamp(Color, 0, 1);
	Color = pow(Color, 1.0/1.8);
	
	Result[id.xy] = float4(Color, 1);
}
